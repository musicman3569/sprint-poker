// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SprintPokerApi.Data;

#nullable disable

namespace SprintPokerApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250830213137_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokerPlayerPokerRoom", b =>
                {
                    b.Property<Guid>("PokerPlayersPokerPlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PokerRoomsPokerRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("PokerPlayersPokerPlayerId", "PokerRoomsPokerRoomId");

                    b.HasIndex("PokerRoomsPokerRoomId");

                    b.ToTable("PokerPlayerRooms", (string)null);
                });

            modelBuilder.Entity("SprintPokerApi.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The unique identifier for the card.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CardId"));

                    b.Property<int>("CardSetId")
                        .HasColumnType("integer")
                        .HasComment("The identifier of the card set this card belongs to.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created. Defaults to the current date and time.");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who created the entity.");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasComment("The display name of the card. Limited to 24 characters.");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last modified. Defaults to the current date and time.");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who last modified the entity.");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasComment("The numerical value of the card used for story point estimation.");

                    b.HasKey("CardId");

                    b.HasIndex("CardSetId");

                    b.ToTable("Cards", t =>
                        {
                            t.HasComment("Represents a planning poker card entity with its value and display properties. A card belongs to a card set, and has the value that will be used for story point estimation. Inherits audit properties from AuditableEntity.");
                        });
                });

            modelBuilder.Entity("SprintPokerApi.Models.CardSet", b =>
                {
                    b.Property<int>("CardSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The unique identifier for the card set.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CardSetId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created. Defaults to the current date and time.");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who created the entity.");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last modified. Defaults to the current date and time.");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who last modified the entity.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasComment("The name of the card set. Limited to 36 characters.");

                    b.HasKey("CardSetId");

                    b.ToTable("CardSets", t =>
                        {
                            t.HasComment("Represents a collection of planning poker cards that can be used for story point estimation. This can be used to create different sprint point schemes such as fibonacci or t-shirt sizes. Inherits audit properties from AuditableEntity.");
                        });
                });

            modelBuilder.Entity("SprintPokerApi.Models.PokerPlayer", b =>
                {
                    b.Property<Guid>("PokerPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier for the poker player.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created. Defaults to the current date and time.");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who created the entity.");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("The display name of the player shown during poker sessions. Limited to 256 characters.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("The email address of the player. Limited to 256 characters.");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last modified. Defaults to the current date and time.");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who last modified the entity.");

                    b.Property<Guid?>("PokerRoomCurrentId")
                        .HasColumnType("uuid")
                        .HasComment("The identifier of the poker room where the player is currently present.");

                    b.HasKey("PokerPlayerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PokerRoomCurrentId");

                    b.ToTable("PokerPlayers", t =>
                        {
                            t.HasComment("Represents a player in the planning poker session. Inherits audit properties from AuditableEntity.");
                        });
                });

            modelBuilder.Entity("SprintPokerApi.Models.PokerRoom", b =>
                {
                    b.Property<Guid>("PokerRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier for the poker room.");

                    b.Property<int>("CardSetId")
                        .HasColumnType("integer")
                        .HasComment("The identifier of the card set used in this poker room.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created. Defaults to the current date and time.");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who created the entity.");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last modified. Defaults to the current date and time.");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier of the user who last modified the entity.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("The name of the poker room. Limited to 256 characters.");

                    b.HasKey("PokerRoomId");

                    b.HasIndex("CardSetId");

                    b.ToTable("PokerRooms", t =>
                        {
                            t.HasComment("Represents a planning poker room where players can participate in story point estimation sessions. Inherits audit properties from AuditableEntity.");
                        });
                });

            modelBuilder.Entity("SprintPokerApi.Models.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("The unique identifier for the vote.");

                    b.Property<int>("CardId")
                        .HasColumnType("integer")
                        .HasComment("The identifier of the selected card for this vote.");

                    b.Property<Guid>("PokerPlayerId")
                        .HasColumnType("uuid")
                        .HasComment("The identifier of the player who cast this vote.");

                    b.Property<Guid>("PokerRoomId")
                        .HasColumnType("uuid")
                        .HasComment("The identifier of the poker room where this vote was cast.");

                    b.Property<int>("VoteFlagId")
                        .HasColumnType("integer")
                        .HasComment("The identifier of the vote flag status.");

                    b.HasKey("VoteId");

                    b.HasIndex("CardId");

                    b.HasIndex("PokerRoomId");

                    b.HasIndex("VoteFlagId");

                    b.HasIndex("PokerPlayerId", "PokerRoomId")
                        .IsUnique();

                    b.ToTable("Votes", t =>
                        {
                            t.HasComment("Represents a vote cast by a player in a planning poker room. Each vote links a player's card selection to a specific poker room.");
                        });
                });

            modelBuilder.Entity("SprintPokerApi.Models.VoteFlag", b =>
                {
                    b.Property<int>("VoteFlagId")
                        .HasColumnType("integer")
                        .HasComment("The identifier representing the type of vote flag.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("The description of the vote flag. Limited to 255 characters.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasComment("The name of the vote flag. Limited to 24 characters.");

                    b.HasKey("VoteFlagId");

                    b.ToTable("VoteFlag", t =>
                        {
                            t.HasComment("Represents a vote flag entity that defines the voting behavior and its description.");
                        });
                });

            modelBuilder.Entity("PokerPlayerPokerRoom", b =>
                {
                    b.HasOne("SprintPokerApi.Models.PokerPlayer", null)
                        .WithMany()
                        .HasForeignKey("PokerPlayersPokerPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SprintPokerApi.Models.PokerRoom", null)
                        .WithMany()
                        .HasForeignKey("PokerRoomsPokerRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SprintPokerApi.Models.Card", b =>
                {
                    b.HasOne("SprintPokerApi.Models.CardSet", "CardSet")
                        .WithMany()
                        .HasForeignKey("CardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardSet");
                });

            modelBuilder.Entity("SprintPokerApi.Models.PokerPlayer", b =>
                {
                    b.HasOne("SprintPokerApi.Models.PokerRoom", "PokerRoomCurrent")
                        .WithMany("CurrentPlayers")
                        .HasForeignKey("PokerRoomCurrentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PokerRoomCurrent");
                });

            modelBuilder.Entity("SprintPokerApi.Models.PokerRoom", b =>
                {
                    b.HasOne("SprintPokerApi.Models.CardSet", "CardSet")
                        .WithMany()
                        .HasForeignKey("CardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardSet");
                });

            modelBuilder.Entity("SprintPokerApi.Models.Vote", b =>
                {
                    b.HasOne("SprintPokerApi.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SprintPokerApi.Models.PokerPlayer", "PokerPlayer")
                        .WithMany()
                        .HasForeignKey("PokerPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SprintPokerApi.Models.PokerRoom", "PokerRoom")
                        .WithMany("Votes")
                        .HasForeignKey("PokerRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SprintPokerApi.Models.VoteFlag", "VoteFlag")
                        .WithMany()
                        .HasForeignKey("VoteFlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("PokerPlayer");

                    b.Navigation("PokerRoom");

                    b.Navigation("VoteFlag");
                });

            modelBuilder.Entity("SprintPokerApi.Models.PokerRoom", b =>
                {
                    b.Navigation("CurrentPlayers");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
